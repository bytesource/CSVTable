h1. CSVTable

h3. A Ruby class for entering data from a CSV file into a database.

CSVTable reads a csv file from a given path and stores its headers and fields.
This data can be entered into a corresponding database using the CSVTable#execute method.
"Sequel":http://sequel.rubyforge.org/ is used as the ORM between CSVTable and the database.

h2. Conventions

h3. CSV File

h4. CSV Data Format

CSVTable does not deal with every kind of differently formatted csv data out there.
Therefore it is required that the csv file adheres to the following conventions: 
* Header names can be enclosed in quotes.
* Header names can be uppercase or lowercase (will be converted to lowercase).
* Header names can consist of several words (spaces will be converted to underscores).
* Field data can be missing or being empty ("").
* Line breaks within any header or field are not handled properly. 

h4. Table Name
* The file name must be prefixed with the name of the database table, followed by a separator (default: @)
* The prefix can be both uppercase or lowercase.
* The prefix representing the table name cannot be ommitted.

_Example_
<pre><code>
DNA_check.csv 
</code></pre>

The prefix _DNA_ will be converted into _:dna_ and stored as the table name. 

h4. Headers
* Header names must match their corresponding column names.
* Header names can be both uppercase or lowercase.

h4. Fields
* If a String value represents an Integer, it is converted into an Integer.
* If a String value represents a Float, it is converted into a Float.
* If a value is missing at the end, it is set to nil.
* If a value is missing anywhere else, it is set to a replacement value, nil by default.



h3. Database Table

h4. Table Name
* The table name must equal the (lowercase) prefix of the csv file name.

h4. Column Names
* Column names must equal the (lowercase) header names of the csv file.

h4. :hash Column
* Every table needs to have an additional column of type :String with the name :hash.
* The :hash column ensures that the same data cannot be added twice (also see "" below).


h2. Data Integrity

* Use the _executed?_ method to test if the data of an instance of CSVTable has been successfully 
inserted into the database.
* On instantiation, a SHA2 hash on the csv file's fields data is created and stored in the object.
* This hash value is stored in the :hash column for every data row of a given csv file.
* Before inserting any data into the database, the hash values already stored in the database are checked against the 
hash value of data to be added.
* If the hash value of the data to be added is found in the database, an exeption is thrown and the (dupliate) data is not inserted.


h2. Usage

Please see *how_to_use.rb* in this directory.


h3. NOTE

This is my first attempt at programming in Ruby the code and it probably shows.
Nevertheless, I am determined to constantly improve and especially learn from the many great coders out there.
That's why I _highly_ appreciate _any_ suggestions that might help me make my code more idiomatic and robust.

